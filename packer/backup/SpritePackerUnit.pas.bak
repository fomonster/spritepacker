{*******************************************************************************

  Проект: SpritePacker
  Автор: Фомин С.С.


  Назначение модуля:


*******************************************************************************}
unit SpritePackerUnit;

{$mode objfpc}{$H+}

interface

uses
    Classes, SysUtils, SpritePackerThreadUnit, SpritePackerNodeUnit, Dialogs,
    SSGenericListUnit, MaxRectsBinPackUnit, LogFormUnit, SSXMLUnit;

type

  PPackerNodeArray = ^TPackerNodeArray;
  TPackerNodeArray = array [0..100000000] of TSpritePackerNode;

  TSpritePacker = class
  private
    NodeArray: PPackerNodeArray;
  public
    Count: integer;

    IsChanged:boolean;
    IsLoadedOnThisFrame:boolean;

    IsNeedRepaint:Boolean;

    thread: TSpritePackerThread;

    //
    filename:String; // sps filename and path

    // settings misc
    currentPageClampedWidth:integer;
    currentPageClampedHeight:integer;
    maxWidth:integer;  // 256 - 16384
    maxHeight:integer; // 256 - 16384
    clampWidthAndHeight:integer; // 0 - minimal, 1 - pow 2
    spritesOptimization:integer; // 0 - original, 1 - crop alpha
    spritesRotation:integer; // 0 -no, 1 - allow
    spritesMargin:integer; // 0 - no, 1 - yes
    preSorting:integer; // 0 - no, 1 - area, 2 - generic
    sortingMethod:integer; // 0 - Best short side fit, 1 - Best long side fit, 2 - Best area fit, 3 - Botom left rule, 4 - Contact point rule
    postProcess:integer; // 0 - no, 1 - fix border holes
    namesWithPath:integer; // 0 - no path, 1 - full path
    namesWithExt:integer; // 0 - no ext, 1 - ext

    outputDataFileName:AnsiString;
    outputDataFileFormat:AnsiString;

    outputImageFileName:AnsiString; //
    outputImageFileFormat:AnsiString; // png, jpg, bmp, webp

    pagesCount:integer;

    //
    constructor Create;
    destructor Destroy;override;

    function Get(index: integer): TSpritePackerNode;
    procedure Put(index: integer; const Value: TSpritePackerNode);

    procedure Clear;
    procedure SetCount(NewLength: integer);

    function Add(parentNode:TSpritePackerNode): TSpritePackerNode;
    function Push: TSpritePackerNode;
    function Insert(index: integer): TSpritePackerNode;

    procedure Pop;
    procedure Delete(index: integer);
    function DeleteAllIfNeed:Boolean;

    procedure StopThread;
    procedure StartThread;

    property items[index: integer]: TSpritePackerNode Read Get; default;

    procedure AddFile(_filename:String; parentNode: TSpritePackerNode);

    procedure FrameMove;
    procedure ThreadFrameMove;

    //
    procedure ToXML(xmlRoot:TXMLNode);
    procedure FromXML(xml:TXMLNode);
    procedure updatePaths(newFileName:String);

    procedure MaxRectsSort;

    function GetParentOf(child:TSpritePackerNode):TSpritePackerNode;
  end;

implementation

uses Forms;

constructor TSpritePacker.Create;
begin

  maxWidth := 2048; // 256 - 16384
  maxHeight := 2048; // 256 - 16384
  clampWidthAndHeight:=0; // 0 - minimal, 1 - pow 2
  spritesOptimization:=0; // 0 - original, 1 - crop alpha
  spritesRotation:=0; // 0 -no, 1 - allow
  spritesMargin:=0; // 0 - no, 1 - yes
  preSorting:=0; // 0 - no, 1 - area, 2 - generic
  sortingMethod:=0; // 0 - Best short side fit, 1 - Best long side fit, 2 - Best area fit, 3 - Botom left rule, 4 - Contact point rule
  postProcess:=0; // 0 - no, 1 - fix border holes
  namesWithPath:=0; // 0 - no, 1 - full path hierarcy
  namesWithExt:=0; // 0 - no ext, 1 - ext

  outputDataFileName:='';
  outputDataFileFormat:='Starling';

  outputImageFileName:='';
  outputImageFileFormat:='png'; // png, jpg, bmp, webp

  IsChanged := False;
  IsNeedRepaint := False;

  Count := 0;
  NodeArray := nil;
  pagesCount := 0;

  thread := TSpritePackerThread.Create(True);
  thread.owner := TClass(self);

  thread.Resume;

end;

destructor TSpritePacker.Destroy;
begin
  //  if thread.Suspended then thread.Resume;
  thread.Terminate;
  sleep(100);
  Clear;
end;


function TSpritePacker.GetParentOf(child: TSpritePackerNode): TSpritePackerNode;
  var
    i:integer;
    j:integer;
begin
  result:=nil;
  for i:=0 to Count-1 do begin
    for j:=0 to items[i].childsCount-1 do begin
        if ( items[i].childs[j] = child.id ) then begin
          result:=items[i];
          exit;
        end;
    end;
  end;
end;

function TSpritePacker.Get(index: integer): TSpritePackerNode;
begin
  if (NodeArray <> nil) and (index >= 0) and (index < Count) then
    Result := NodeArray^[index]
  else
    Result := nil;
end;

procedure TSpritePacker.Put(index: integer; const Value: TSpritePackerNode);
begin
  if (index >= 0) and (index < Count) then
    NodeArray^[index] := Value;
end;

procedure TSpritePacker.Clear;
var
  i: integer;
begin
  for i := 0 to Count - 1 do
    NodeArray^[i].Destroy;
  Count := 0;
  Freemem(NodeArray);
  NodeArray := nil;
end;

procedure TSpritePacker.SetCount(NewLength: integer);
var
  i: integer;
begin
  if NewLength = Count then
    exit;
  IsChanged := True;
  if NewLength > 0 then
  begin
    if NewLength < Count then
    begin
      for i := NewLength to Count - 1 do
        NodeArray^[i].Destroy;
    end;
    ReAllocMem(NodeArray, sizeof(TSpritePackerNode) * NewLength);
    if NewLength > Count then
    begin
      for i := Count to NewLength - 1 do
      begin
        NodeArray^[i]    := TSpritePackerNode.Create;
        NodeArray^[i].Id := i;
        NodeArray^[i].owner := TClass(self);
      end;
    end;
    Count := NewLength;
  end
  else
  begin
    Clear;
  end;

end;

function TSpritePacker.Add(parentNode:TSpritePackerNode):TSpritePackerNode;
begin
  SetCount(Count + 1);
  Result    := NodeArray^[Count - 1];
  if ( parentNode <> nil ) then begin

    Result.parentId := parentNode.Id;
    parentNode.AddChild(Result.Id);
  end;
  Result.IsChanged := True;
  IsChanged := True;
end;

function TSpritePacker.Insert(index: integer): TSpritePackerNode;
var
  i: integer;
begin
  if index > Count then
    index := Count;
  if (index >= 0) then
  begin
    IsChanged := True;
    ReAllocMem(NodeArray, sizeof(TSpritePackerNode) * (Count + 1));
    if index < Count then
    begin
      System.Move(NodeArray^[index], NodeArray^[index + 1],
        (Count - index) * sizeof(TSpritePackerNode));
    end;
    NodeArray^[index] := TSpritePackerNode.Create;
    NodeArray^[index].owner := TClass(self);
    Inc(Count);
    for i := index to Count - 1 do
      NodeArray^[i].Id := i;
    Result := NodeArray^[index];
  end
  else
    Result := nil;
end;



function TSpritePacker.Push: TSpritePackerNode;
begin
  SetCount(Count + 1);
  Result := NodeArray^[Count - 1];
  IsChanged := True;
end;

procedure TSpritePacker.Pop;
begin
  Delete(Count - 1)
end;

procedure TSpritePacker.Delete(index: integer);

  procedure RecurseSelect(id:Integer);
    var
      i:Integer;
  begin
    NodeArray^[id].IsNeedDelete:=true;
    for i:=0 to NodeArray^[id].ChildsCount-1 do
      RecurseSelect(NodeArray^[id].Childs[i]);
  end;

var
  i:integer;
begin
  if (index >= 0) and (index < Count) then begin

    for i := 0 to Count - 1 do begin
      NodeArray^[i].IsNeedDelete:=false;
    end;

    RecurseSelect(index);

    IsChanged := DeleteAllIfNeed;

  end;
end;

function TSpritePacker.DeleteAllIfNeed:Boolean;
var
  i, j, k, l, movingElement, deletedCount: integer;
begin
  // Сохраняем старые id нодов
  for i := 0 to Count - 1 do begin
    NodeArray^[i].bakId:=NodeArray^[i].Id;

    // Если элемент на удаление, его нужно удалить из всех списков childs всех других нодов
    if NodeArray^[i].IsNeedDelete then begin
      for j := 0 to Count - 1 do begin
        deletedCount := 0;
        movingElement := -1;
        for k:=0 to NodeArray^[j].ChildsCount-1 do begin
          if NodeArray^[j].Childs[k] = NodeArray^[i].id then begin
            Inc(deletedCount);
            if movingElement = -1 then movingElement := k;
          end else begin
            if movingElement >= 0 then begin
              NodeArray^[j].Childs[movingElement] := NodeArray^[j].Childs[k];
              movingElement := movingElement + 1;
            end;
          end;
        end;
        if ( deletedCount > 0 ) then begin
          NodeArray^[j].ChildsCount := NodeArray^[j].ChildsCount - deletedCount;
          SetLength(NodeArray^[j].Childs, NodeArray^[j].ChildsCount);
        end;
      end;
    end

  end;
  // за одни проход по массиву удаляем элементы и изменяем id на новые
  result := false;
  j := -1;
  k := 0;
  for i := 0 to Count - 1 do begin
    if NodeArray^[i].IsNeedDelete then begin
      IsChanged := True;
      NodeArray^[i].Destroy;
      Inc(k);
      if j = -1 then j := i;
    end else begin
      if j >= 0 then begin
        NodeArray^[j] := NodeArray^[i];
        NodeArray^[j].id := j;
        j := j + 1;
      end;
    end;
  end;

  // Изменяем кол-во элементов в массиве
  Count := Count - k;
  if k > 0 then begin

    ReAllocMem(NodeArray, sizeof(TSpritePackerNode) * Count);
    result:=true;

    // Теперь логика деревьев (нужно удалить ссылки на удаленные childs и сдвинуть те что поменяли id)
    for i:=0 to count-1 do begin

      // Ссылки на родителей
      for j:=0 to count-1 do begin
        if NodeArray^[j].bakId=NodeArray^[i].parentId then NodeArray^[i].parentId:=j;
      end;

      // Ссылки на детей
      for k:=0 to NodeArray^[i].ChildsCount-1 do begin
        for j:=0 to count-1 do
          if NodeArray^[j].bakId=NodeArray^[i].Childs[k]
            then NodeArray^[i].Childs[k]:=j;

      end;
    end;

  end;
end;

procedure TSpritePacker.StopThread;
begin
  if thread.Suspended then thread.Resume;
  thread.IsNeedStop:=true;
  while not thread.IsStopped do begin
    Application.ProcessMessages;
  end;
end;

procedure TSpritePacker.StartThread;
begin
  thread.IsNeedStop:=false;
  if thread.Suspended then thread.Resume;
end;

procedure TSpritePacker.AddFile(_filename:String; parentNode: TSpritePackerNode);
  var
    node:TSpritePackerNode;
    i:integer;
    isFounded, isEqual:Boolean;
    attr:integer;
    list:String;
begin
  isFounded:=false;
  list := '';
  for i:=0 to Count-1 do begin
    node := self[i];
    isEqual := ( LowerCase(node.filepath+node.filename) = LowerCase(_filename) );
    list := list + node.filepath+node.filename + #13+#10;
    if isEqual then begin
      isFounded:=true;
      break;
    end;
  end;
  if ( isFounded ) then exit;
  //ShowMessage(list+#13+#10+'Check:'+_filename);
  node := Add(parentNode);

  attr := FileGetAttr(_filename);

  if (( attr and faDirectory ) <> 0 ) then begin
    node.typeId := SPRITE_PACKER_NODE_TYPE_FOLDER;
  end else begin
    node.typeId := SPRITE_PACKER_NODE_TYPE_IMAGE;
  end;
  node.filename := ExtractFileName(_filename);
  node.filepath := ExtractFilePath(_filename);
  node.updateFile;
  IsLoadedOnThisFrame:=true;
end;

procedure TSpritePacker.FrameMove;
var
  i:integer;
begin
  IsLoadedOnThisFrame := false;

  for i:=0 to Count-1 do begin
    items[i].updateFile;
  end;

  //
  if DeleteAllIfNeed then begin
    IsChanged:=true;
  end;
end;

procedure TSpritePacker.ThreadFrameMove;
begin

end;

function PowerOfTwo(Value:Integer):Integer;
  var
    v:integer;
begin
  v:=1;
  while (v < value) do v := v shl 1;
  result := v;
end;

procedure TSpritePacker.MaxRectsSort;
  var
    i:integer;
    j:integer;
    listLength:integer;
    list:array of TSpritePackerNode;
    item:TSpritePackerNode;
    bin:TMaxRectsBinPack;
    rect:TRectangle;
    spriteWidth:integer;
    spriteHeight:integer;
    tmp:TSpritePackerNode;
    cnt:integer;
    mW, mH:integer;
    spritesAddedOnThisPage:integer;
begin

  mW:=0;
  mH:=0;
  // Создаем временный массив
  listLength := 0;
  for i:=0 to Count-1 do begin
    if items[i].typeId = SPRITE_PACKER_NODE_TYPE_IMAGE then begin
      listLength := listLength + 1;
      SetLength(list, listLength);
      list[listLength-1] := items[i];

      if ( spritesRotation <= 0 ) then begin
        if ( mW < list[listLength-1].width ) then mW := list[listLength-1].width;
        if ( mH < list[listLength-1].height ) then mH := list[listLength-1].height;
      end else begin

        if ( mW < list[listLength-1].height ) then mW := list[listLength-1].height;
        if ( mH < list[listLength-1].width ) then mH := list[listLength-1].width;

      end;

    end;
  end;
  cnt := length(list);

  // Проблема с размерами
  if ( maxWidth < mW ) then begin
    maxWidth := PowerOfTwo(mW);
  end;
  if ( maxHeight < mH ) then begin
    maxHeight := PowerOfTwo(mH);
  end;



  //
  if ( preSorting = 1 ) then begin
    for i:=0 to cnt-2 do begin
      for j:=i+1 to cnt-1 do begin

        if ( list[i].width  < list[j].width ) then begin

          tmp:=list[j];
          list[j] := list[i];
          list[i] := tmp;

        end;

      end;
    end;
  end else if ( preSorting = 2 ) then begin
    for i:=0 to cnt-2 do begin
      for j:=i+1 to cnt-1 do begin

        if (  list[i].height < list[j].height ) then begin

          tmp:=list[j];
          list[j] := list[i];
          list[i] := tmp;

        end;

      end;
    end;
  end else begin
      for i:=0 to cnt-2 do begin
        for j:=i+1 to cnt-1 do begin

          if ( list[i].width * list[i].height < list[j].width * list[j].height ) then begin

            tmp:=list[j];
            list[j] := list[i];
            list[i] := tmp;

          end;

        end;
      end;
  end;

  //
  spritesAddedOnThisPage:=0;
  pagesCount := 0;
  bin := TMaxRectsBinPack.Init(maxWidth, maxHeight, (spritesRotation > 0) );
  i:=0;
  while i < cnt do begin

    item :=list[i];
    if ( spritesOptimization > 0 ) then begin
      spriteWidth := item.trimMaxX - item.trimMinX + 1;
      spriteHeight := item.trimMaxY - item.trimMinY + 1;
    end else begin
      spriteWidth := item.width;
      spriteHeight := item.height;
    end;

    if ( postProcess > 0 ) then begin
      spriteWidth := spriteWidth + 2;
      spriteHeight := spriteHeight + 2;
    end else if ( spritesMargin > 0 ) then begin
      spriteWidth := spriteWidth + 2;
      spriteHeight := spriteHeight + 2;
    end;

    rect:=bin.Insert(spriteWidth, spriteHeight, sortingMethod);
    rect.data := pointer(item);

    if ( rect.height > 0 ) then begin

      item.x := rect.x;
      item.y := rect.y;
      item.turn := rect.rotated;
      item.page := pagesCount;

      if ( postProcess > 0 ) then begin
        item.x := item.x + 1;
        item.y := item.y + 1;
      end else if ( spritesMargin > 0 ) then begin
        item.x := item.x + 1;
        item.y := item.y + 1;
      end;
      spritesAddedOnThisPage:=spritesAddedOnThisPage+1;
      //TODO: AddLog('Packed to ('+inttostr(rect.x)+','+inttostr(rect.y)+'), ('+inttostr(rect.width)+','+inttostr(rect.height)+').' );
    end else begin

      if ( spritesAddedOnThisPage = 0 ) then begin
        if ( spritesRotation <= 0 ) then begin
          maxWidth := maxWidth shl 1;
          if ( maxWidth > 16384 ) then maxWidth:=16384;
        end else begin
          maxHeight := maxHeight shl 1;
          if ( maxHeight > 16384 ) then maxHeight:=16384;
        end;
      end else begin
        pagesCount:=pagesCount+1;
      end;
      bin.Destroy;
      bin := TMaxRectsBinPack.Init(maxWidth, maxHeight, (spritesRotation > 0) );

      i:=i-1;
    end;

    i:=i+1;
  end;

  pagesCount:=pagesCount+1;

  bin.Destroy;
  bin:=nil;

  list:=nil;
end;

procedure TSpritePacker.FromXML(xml:TXMLNode);
  var
    xmlSubNode:  TXMLNode;
    xmlRoot: TXMLNode;
    node: TSpritePackerNode;
    i:integer;
begin
  if xml['SpritePacker'].IsNotEmpty then begin
    Clear;

    xmlRoot := xml['SpritePacker'];

    //
    filename := xmlRoot.Attribute_Str('filename');

    // Settings
    maxWidth:=xmlRoot.Attribute_Int('maxWidth');
    if ( maxWidth < 256 ) then maxWidth := 256;
    if ( maxWidth > 8192 ) then maxWidth := 8192;

    maxHeight:=xmlRoot.Attribute_Int('maxHeight');
    if ( maxHeight < 256 ) then maxHeight := 256;
    if ( maxHeight > 8192 ) then maxHeight := 8192;

    clampWidthAndHeight:=xmlRoot.Attribute_Int('clampWidthAndHeight');
    if ( not ( clampWidthAndHeight in [0,1] ) ) then clampWidthAndHeight:=0;

    spritesOptimization:=xmlRoot.Attribute_Int('spritesOptimization');
    if ( not ( spritesOptimization in [0,1] ) ) then spritesOptimization:=0;

    spritesRotation:=xmlRoot.Attribute_Int('spritesRotation');
    if ( not ( spritesRotation in [0,1] ) ) then spritesRotation:=0;

    spritesMargin:=xmlRoot.Attribute_Int('spritesMargin');
    if ( not ( spritesMargin in [0,1] ) ) then spritesMargin:=0;

    preSorting:=xmlRoot.Attribute_Int('preSorting');
    if ( not ( preSorting in [0,1,2] ) ) then preSorting:=0;

    sortingMethod:=xmlRoot.Attribute_Int('sortingMethod');
    if ( not ( sortingMethod in [0,1,2,3,4] ) ) then sortingMethod:=0;

    postProcess:=xmlRoot.Attribute_Int('postProcess');
    if ( not ( postProcess in [0,1] ) ) then postProcess:=0;

    namesWithPath:=xmlRoot.Attribute_Int('namesWithPath');
    if ( not ( namesWithPath in [0,1] ) ) then namesWithPath:=0;

    namesWithExt:=xmlRoot.Attribute_Int('namesWithExt');
    if ( not ( namesWithExt in [0,1] ) ) then namesWithExt:=0;

    outputDataFileName := xmlRoot.Attribute_B64Str('outputDataFileName');
    outputDataFileFormat := xmlRoot.Attribute_Str('outputDataFileFormat' );
    //if ( not ( outputDataFileFormat in [0,1] ) ) then outputDataFileFormat:=0;

    outputImageFileName := xmlRoot.Attribute_B64Str('outputImageFileName' );
    outputImageFileFormat := xmlRoot.Attribute_Str('outputImageFileFormat' );
    if ( not ( Pos(outputImageFileFormat,'png,jpg,bmp,webp') >= 0 ) ) then outputImageFileFormat:='png';
    // Nodes

    for i:=0 to xml['SpritePacker'].SubNodesCount-1 do begin
      xmlSubNode:=xml['SpritePacker'].SubNodes[i];

      if xmlSubNode.Name='node' then begin
        node:=Add(nil);
        node.SetFromXML(xmlSubNode);
      end;

    end;


    IsChanged:=true;
  end;
end;

{**
 *
 *}
procedure TSpritePacker.ToXML(xmlRoot:TXMLNode);
  var
    i:integer;
    RootNode: TSpritePackerNode;
begin

  // Settings
  xmlRoot.Attribute_SetInt('maxWidth', maxWidth);
  xmlRoot.Attribute_SetInt('maxHeight', maxHeight);
  xmlRoot.Attribute_SetInt('clampWidthAndHeight', clampWidthAndHeight);
  xmlRoot.Attribute_SetInt('spritesOptimization', spritesOptimization);
  xmlRoot.Attribute_SetInt('spritesRotation', spritesRotation);
  xmlRoot.Attribute_SetInt('spritesMargin', spritesMargin);
  xmlRoot.Attribute_SetInt('preSorting', preSorting);
  xmlRoot.Attribute_SetInt('sortingMethod', sortingMethod);
  xmlRoot.Attribute_SetInt('postProcess', postProcess);
  xmlRoot.Attribute_SetInt('namesWithPath', namesWithPath);
  xmlRoot.Attribute_SetInt('namesWithExt', namesWithExt);

  xmlRoot.Attribute_SetB64Str('outputDataFileName', outputDataFileName);
  xmlRoot.Attribute_SetStr('outputDataFileFormat', outputDataFileFormat);
  xmlRoot.Attribute_SetB64Str('outputImageFileName', outputImageFileName);
  xmlRoot.Attribute_SetStr('outputImageFileFormat', outputImageFileFormat);

  // Nodes
  RootNode := nil;
  for i := 0 to Count - 1 do
  begin
    if items[i].parentId = -1 then begin
      RootNode := items[i];
      RootNode.SetToXML(xmlRoot);
    end;
  end;
  if RootNode = nil then exit;

end;

procedure TSpritePacker.updatePaths(newFileName:String);
  var
    i:integer;
    filepath:AnsiString;
    basePath:AnsiString;
    before:AnsiString;
begin
  // Базовое имя файла куда сохранен проект
  basePath:=ExtractFilePath(newFileName);

  // Имя файла отличается от предыдущего (ralativepath уже посчитаны т.к.
  if ( lowercase(newFileName) <> lowercase(filename) ) then begin

    filename := newFileName;
    for i := 0 to Count - 1 do
    begin
      if (items[i].filename <> '') then begin
         before:=items[i].filepath;
         items[i].relativepath := ExtractRelativepath(filename, items[i].filepath);
         items[i].filepath := basePath + items[i].relativepath;
         //ShowMessage('WO:'+before+#13+#10+ items[i].filepath);
      end;
    end;

  end else begin

    for i := 0 to Count - 1 do
    begin
      items[i].relativepath := ExtractRelativepath(filename, items[i].filepath);
      //ShowMessage('WOW:'+items[i].relativepath+#13+#10+items[i].filepath+#13+#10+ items[i].filename);
    end;

  end;

end;

end.

